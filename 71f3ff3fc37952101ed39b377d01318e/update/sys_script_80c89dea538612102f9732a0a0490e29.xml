<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1545096_zerecrui_candidate_submissions</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_1545096_zerecrui_candidate_submissions">u_dobVALCHANGES^EQ<item endquery="false" field="u_dob" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>DOB Validation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

    var dob = current.u_dob;  // Get the Date of Birth field value
    var dobDate = new GlideDateTime(dob);  // Convert to GlideDateTime object
    var today = new GlideDateTime();  // Current date and time
    
    // Ensure DOB is not in the future
    if (dobDate.getNumericValue() > today.getNumericValue()) {
        gs.addErrorMessage('Invalid Date of Birth. Date cannot be in the future.');
        current.setAbortAction(true);  // Prevent record save
        return;
    }

    // Calculate age based on current date and DOB
    var age = today.getYear() - dobDate.getYear();

    // Adjust age if the birthday has not yet occurred this year
    if (today.getMonth() < dobDate.getMonth() || 
        (today.getMonth() === dobDate.getMonth() && today.getDayOfMonth() < dobDate.getDayOfMonth())) {
        age--;
    }

    // Validate that the age is between 18 and 100
    if (age < 18 || age > 100) {
        gs.addErrorMessage('Invalid Date of Birth. Age must be between 18 and 100 years.');
        current.setAbortAction(true);  // Prevent record save
    }




})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-26 11:39:38</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>80c89dea538612102f9732a0a0490e29</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>DOB Validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="ZeRecruiter" source="x_1545096_zerecrui">71f3ff3fc37952101ed39b377d01318e</sys_package>
        <sys_policy/>
        <sys_scope display_value="ZeRecruiter">71f3ff3fc37952101ed39b377d01318e</sys_scope>
        <sys_update_name>sys_script_80c89dea538612102f9732a0a0490e29</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-26 11:45:48</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=80c89dea538612102f9732a0a0490e29"/>
</record_update>
